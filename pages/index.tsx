import Head from "next/head";
import { GetServerSideProps } from "next";
import { Inter } from "next/font/google";
import { useState, useEffect } from "react";
import Link from "next/link";
import prisma from "../lib/prisma";
import Header from "@/components/Header";
import { MdOutlineAdd } from "react-icons/md";
import { useRouter } from "next/router";
const inter = Inter({ subsets: ["latin"] });
export const getServerSideProps: GetServerSideProps = async () => {
  const initialResults = await prisma.post.findMany({
    include: {
      categories: true,
    },
  });
  return {
    props: { initialResults },
  };
};

export default function Home({ initialResults }) {
  const router = useRouter();
  const [notesData, setNotesData] = useState(initialResults);
  const [darkTheme, setDarkTheme] = useState(false);
  const [categories, setCategories] = useState([]);
  const [activeFilter, setActiveFilter] = useState("");
  const handleDarkThemeToggle = () => {
    setDarkTheme(!darkTheme);
  };
  const storeUserSetPreference = (pref) => {
    localStorage.setItem("theme", pref);
  };

  useEffect(() => {
    const root = document.documentElement;
    if (root.classList.contains("dark")) {
      setDarkTheme(true);
    }
    setActiveFilter("z0");
  }, []);

  useEffect(() => {
    const root = document.documentElement;
    if (darkTheme !== undefined) {
      if (darkTheme) {
        root.classList.remove("light");
        root.classList.add("dark");
        storeUserSetPreference("dark");
      } else {
        root.classList.remove("dark");
        root.classList.add("light");
        storeUserSetPreference("light");
      }
    }
  }, [darkTheme]);

  useEffect(() => {
    async function loadCats() {
      const res = await fetch("api/get-categories");
      const currentCats = await res.json();
      setCategories(currentCats);
    }
    loadCats();
  }, []);

  async function filterResults(cat) {
    const res = await fetch(`/api/filter-notes?name=${cat}`);
    const filtered = await res.json();
    setNotesData(filtered);
  }
  async function getAllResults() {
    const res = await fetch("/api/all-notes");
    const notes = await res.json();
    setNotesData(notes);
  }

  function activateFilterSelected(id) {
    setActiveFilter(id);
  }

  return (
    <>
      <Head>
        <title>Yeah, BuzzPop! Dig it.</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <div className="w-full min-h-screen bg-slate-100 dark:bg-stone-800 ">
        <div className="max-w-md pt-16 mx-auto px-4">
          <div className="whitespace-nowrap w-full overflow-x-auto pb-6">
            <button
              className={`mr-2 p-2 border-2 border-blue-700 dark:text-white rounded-md ${
                activeFilter === "z0" && "bg-blue-700 text-white"
              }`}
              id="z0"
              onClick={() => {
                getAllResults();
                activateFilterSelected("z0");
              }}
            >
              ALL
            </button>
            {categories.map((category) => (
              <button
                className={`mr-2 p-2 border-2 border-blue-700 dark:text-white rounded-md ${
                  activeFilter === "z" + category.id &&
                  " focus:bg-blue-700 focus:text-white"
                }`}
                key={category.id}
                id={"z" + category.id}
                onClick={() => {
                  filterResults(category.name);
                  activateFilterSelected("z" + category.id);
                }}
              >
                {category.name}
              </button>
            ))}
          </div>
          <div className="relative columns-2">
            {notesData.map((post) => (
              <div
                key={post.id}
                className="bg-white rounded-lg shadow-3xl shadow-stone-900 p-4 mb-4"
              >
                <span className="whitespace-pre-line">{post.content}</span>
              </div>
            ))}
            <div className="bg-white opacity-0 rounded-lg shadow-3xl shadow-stone-900 p-4 mb-4">
              <span className="whitespace-pre-line">Hi. I am invisible</span>
            </div>
          </div>
          <Link href="/create" passHref legacyBehavior>
            <button className="fixed flex justify-center items-center bottom-4 right-4 p-4 text-4xl bg-blue-700 rounded-full text-white shadow-md">
              <MdOutlineAdd />{" "}
              <span className="hidden md:inline-block text-lg">Add Note</span>
            </button>
          </Link>
          <div className="fixed bottom-4 left-4">
            <button
              className="hidden px-4 py-2 bg-blue-700 text-white rounded-md"
              onClick={() => setDarkTheme(!darkTheme)}
            >
              Set {darkTheme ? "light" : "dark"} mode
            </button>
            <button
              className="px-4 py-2 bg-blue-700 text-white rounded-md"
              onClick={() => router.push("/create-category")}
            >
              Add New Category
            </button>
          </div>
        </div>
      </div>
    </>
  );
}
